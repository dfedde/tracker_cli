#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'curses'
require 'tracker_cli'
require "net/http"
require "uri"

def onsig(sig)
  Curses.close_screen
  exit sig
end

%w[HUP INT QUIT TERM].each do |i|
  if trap(i, "SIG_IGN") != 0 then  # 0 for SIG_IGN
    trap(i) {|sig| onsig(sig) }
  end
end

$stderr.reopen(File.open('traker_error.txt', 'w'))

Curses.init_screen

begin
  State.reducer do |state, action|
    state = state || {}
    case action[:type]
    when :start
      state[:running] = true
    when :set_project
      state[:project] = action[:project]
    end
    state
  end

  State.send_action type: :start

  Curses.crmode
  # make the cursor invisable
  Curses.curs_set(0)

  screen = Screen.new(Curses::Window.new(0,0,0,0))

  screen.render do
    add_component(SplashScreen,
                  height: 11,
                  width:  90,
                  top:  (Curses.lines - 11)/2,
                  left: (Curses.cols - 90)/2,
                 )
    sleep 2
  end


  m = (Curses.lines - 11)/2
  until m == 1
    screen.render do
      add_component(SplashScreen,
                    height: 11,
                    width:  90,
                    top:  m -= 1,
                    left: (Curses.cols - 90)/2,
                   )
      sleep 0.05
    end
  end

  screen.render do
    add_component(SplashScreen,
                  height: 11,
                  width:  90,
                  top:  0,
                  left: (Curses.cols - 90)/2,
                 )
    sleep 0.2
    add_component(LoginScreen,
                  height: 4,
                  width:  90,
                  top:  12,
                  left: (Curses.cols - 90)/2,
                 )
    sleep 3
  end

  uri = URI('https://www.pivotaltracker.com/services/v5/me')

  Net::HTTP.start(uri.host, uri.port,
                  :use_ssl => uri.scheme == 'https') do |http|
    request = Net::HTTP::Get.new uri
    response = http.request request # Net::HTTPResponse object
    token = JSON.parse(response.body)['api_token']
    PivotalTracker::Client.token = token
  end

  project = PivotalTracker::Project.find(1506772)

  State.send_action type: :set_project, project: project

  screen.render do
     add_component(ProjectView)
  end

  while State.state[:running]
    sleep 1
  end

rescue Exception => e
  $stderr.puts e.inspect
  $stderr.puts e.backtrace
ensure
  Curses.close_screen
end
